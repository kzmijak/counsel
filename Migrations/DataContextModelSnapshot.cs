// <auto-generated />
using System;
using DVDMovie.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace counsel.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Counsel.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChatId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Counsel.Models.ChatPerson", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnName("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ChatPerson");
                });

            modelBuilder.Entity("Counsel.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MessageId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnName("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderPersonId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Counsel.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnName("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnName("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnName("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnName("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkplaceId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("WorkplaceId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Counsel.Models.Workplace", b =>
                {
                    b.Property<int>("WorkplaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkplaceId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasColumnName("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryCode")
                        .HasColumnName("EntryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkplaceId");

                    b.ToTable("Workplace");
                });

            modelBuilder.Entity("Counsel.Models.ChatPerson", b =>
                {
                    b.HasOne("Counsel.Models.Chat", "Chat")
                        .WithMany("People")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counsel.Models.Person", "Person")
                        .WithMany("Chats")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Counsel.Models.Message", b =>
                {
                    b.HasOne("Counsel.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Counsel.Models.Person", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderPersonId");
                });

            modelBuilder.Entity("Counsel.Models.Person", b =>
                {
                    b.HasOne("Counsel.Models.Workplace", "Workplace")
                        .WithMany("Employees")
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
